################################################################################
# Repository: OMV_Compose
# Author: TropicSatern36
# GitHub: https://github.com/TropicSatern36/OMV_Compose
# Description: Docker Compose configuration for managing and automating media 
#              services, including DNS filtering, media management, torrenting, 
#              and reverse proxying.
# Features:
# - Media Management (Emby,Jellyfin, Radarr, Sonarr, Kavita)
# - Torrent Management (qBittorrent)
# - Reverse Proxy (SWAG,NGINX)
# - DNS Filtering (AdGuard Home)
# - Cloudflare Tunnel Integration
################################################################################

# Define custom networks for container communication
networks:
  omv:
    driver: bridge  # Use the bridge driver for communication between containers
    ipam:
      config:
        - subnet: 10.5.0.0/24  # Define a custom subnet for the omv network
          gateway: 10.5.0.1     # Set the gateway for the omv network

# Services section - Each service represents a Docker container running a specific application
services:
  
  # AdGuard Home service for DNS filtering and ad-blocking
  adguard:
    image: docker.io/adguard/adguardhome:latest  # The Docker image for AdGuard Home
    container_name: adguard           # The name of the container
    environment:
      - TZ=${TZ}  # Set the timezone using the TZ environment variable from the .env file
    volumes:
      - ${APPDATA}/adgaurdhome/work:/opt/adguardhome/work  # Persist AdGuard Home data
      - ${APPDATA}/adgaurdhome/conf:/opt/adguardhome/conf  # Persist AdGuard Home configuration
    ports:
      - 53:53/udp  # Expose DNS port (UDP)
    networks:
      omv:
        ipv4_address: 10.5.0.101  # Assign a static IP within the custom network
    restart: unless-stopped  # Ensure the container restarts unless explicitly stopped

  # Cloudflare Tunnel service for secure DNS tunneling
  cloudflared:
    container_name: cloudflared  # Name of the container
    image: docker.io/cloudflare/cloudflared:latest  # Cloudflare Tunnel image
    networks:
      omv:
        ipv4_address: 10.5.0.102  # Static IP address in the custom network
    restart: unless-stopped  # Ensure the container restarts unless explicitly stopped
    command: tunnel run  # Run the Cloudflare tunnel
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}  # Use the TUNNEL_TOKEN from the .env file for authentication

  # Emby Media Server service
  emby:
    #image: lscr.io/linuxserver/emby:latest  # Emby Docker image from LinuxServer.io
    image: lscr.io/linuxserver/jellyfin:latest # Jellyfin Docker image from LinuxServer.io for free solution
    container_name: emby  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
    volumes:
      - ${APPDATA}/emby:/config  # Persist Emby configuration
      - media:/media  # Mount media directory
      - users:/home  # Mount user directory
      - /opt/vc/lib:/opt/vc/lib  # Optional: for hardware acceleration
    devices:
      - /dev/dri:/dev/dri  # Optional: for hardware acceleration (GPU passthrough)
    #ports:
    #  - ${EMBY_PORT}:${EMBY_PORT}  # Expose Emby port
    network_mode: host  # Use host networking mode (can be changed to bridge)
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # Organizr service to manage and organize your media apps
  organizr:
    image: docker.io/organizr/organizr:latest  # Organizr Docker image
    container_name: organizr  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
    volumes:
      - ${APPDATA}/organizr:/config  # Persist Organizr configuration
    networks:
      omv:
        ipv4_address: 10.5.0.104  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # Kavita service for eBook library management
  kavita:
    image: lscr.io/linuxserver/kavita:latest  # Kavita Docker image
    container_name: kavita  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
    volumes:
      - ${APPDATA}/kavita:/config  # Persist Kavita configuration
      - media:/media  # Mount media directory
    networks:
      omv:
        ipv4_address: 10.5.0.105  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # Prowlarr service for indexer management in NZB and torrent clients
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest  # Prowlarr Docker image
    container_name: prowlarr  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
    volumes:
      - ${APPDATA}/prowlarr:/config  # Persist Prowlarr configuration
    networks:
      omv:
        ipv4_address: 10.5.0.106  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # qBittorrent service for torrent downloading
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest  # qBittorrent Docker image
    container_name: qbittorrent  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
      - WEBUI_PORT=${WEBUI_PORT}  # Web UI port from the .env file
      - TORRENTING_PORT=${TORRENTING_PORT}  # Torrenting port from the .env file
    volumes:
      - ${APPDATA}/qbittorrent:/config  # Persist qBittorrent configuration
      - downloads:/downloads  # Mount downloads directory
    ports:
      - ${TORRENTING_PORT}:${TORRENTING_PORT}  # Expose torrenting port
      - ${TORRENTING_PORT}:${TORRENTING_PORT}/udp  # Expose UDP port for torrenting
    networks:
      omv:
        ipv4_address: 10.5.0.107  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # Radarr service for automatic movie downloading
  radarr:
    image: lscr.io/linuxserver/radarr:latest  # Radarr Docker image
    container_name: radarr  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
    volumes:
      - ${APPDATA}/radarr:/config  # Persist Radarr configuration
      - media:/media  # Mount media directory
      - downloads:/downloads  # Mount downloads directory
    networks:
      omv:
        ipv4_address: 10.5.0.108  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # Sonarr service for TV show downloading and management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest  # Sonarr Docker image
    container_name: sonarr  # Container name
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
    volumes:
      - ${APPDATA}/sonarr:/config  # Persist Sonarr configuration
      - media:/media  # Mount media directory
      - downloads:/downloads  # Mount downloads directory
    networks:
      omv:
        ipv4_address: 10.5.0.109  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # SWAG (Secure Web Application Gateway) service for reverse proxy
  swag:
    image: lscr.io/linuxserver/swag:latest  # SWAG Docker image
    #image: lscr.io/linuxserver/nginx:latest  # NGINX Docker image for internal use only
    container_name: swag  # Container name
    cap_add:
      - NET_ADMIN  # Add capabilities to manage network settings
    environment:
      - PUID=${PUID}  # Set user ID for file permissions
      - PGID=${PGID}  # Set group ID for file permissions
      - TZ=${TZ}  # Set the timezone
      - URL=${URL}  # Domain name for reverse proxy
      - SUBDOMAINS=${SUBDOMAINS}  # Use wildcard for subdomains
      - VALIDATION=${VALIDATION}  # DNS validation for SSL certificates
      - DNSPLUGIN=${DNSPLUGIN}  # DNS plugin for Cloudflare validation
    volumes:
      - ${APPDATA}/swag:/config  # Persist SWAG configuration
    ports:
      - ${HTTP_PORT}:${HTTP_PORT}  # Expose HTTP port
      - ${HTTPS_PORT}:${HTTPS_PORT}  # Expose HTTPS port
    networks:
      omv:
        ipv4_address: 10.5.0.110  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped

  # FlareSolverr service for bypassing Cloudflare protection
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest  # FlareSolverr Docker image
    container_name: flaresolverr  # Container name
    environment:
      - TZ=${TZ}  # Set the timezone
    networks:
      omv:
        ipv4_address: 10.5.0.111  # Static IP address in the custom network
    restart: unless-stopped  # Restart the container unless explicitly stopped 

  # Watchtower service for automatic updates of Docker containers
  watchtower:
    image: docker.io/containrrr/watchtower  # Watchtower Docker image
    container_name: watchtower  # Container name
    environment:
      - WATCHTOWER_RUN_ONCE=true  # Run Watchtower once and exit
      - WATCHTOWER_CLEANUP=true  # Remove old images after updating
      - WATCHTOWER_NOTIFICATION_REPORT=true  # Enable notification after update
      - WATCHTOWER_NOTIFICATION_URL=generic://notifiarr.com/api/v1/notification/watchtower/${WATCHTOWER_NOTIFIARR_KEY}?template=json  # Notification URL for updates
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Bind the Docker socket to allow Watchtower to monitor containers
    networks:
      omv:
        ipv4_address: 10.5.0.112  # Static IP address in the custom network
    restart: no  # Do not restart Watchtower, as it runs only once

# Volumes section - Define named volumes for persistent storage
volumes:
  downloads:
    driver: local  # Use local driver for the download volume
    driver_opts:
      type: none
      o: bind
      device: ${DOWNLOADS_PATH}  # Path to the downloads directory

  media:
    driver: local  # Use local driver for the media volume
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_PATH}  # Path to the media directory

  users:
    driver: local  # Use local driver for the users volume
    driver_opts:
      type: none
      o: bind
      device: ${USERS_PATH}  # Path to the users directory
